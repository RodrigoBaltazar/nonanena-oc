#!/bin/bash

# Script de Deploy Docker com Configura√ß√£o .env
# Execute na VPS para deploy completo

echo "üê≥ Deploy Docker - Sistema de Gest√£o de Produtos..."

# Cores
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

print_status() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# 1. Verificar se Docker est√° instalado
print_status "Verificando Docker..."
if ! command -v docker &> /dev/null; then
    print_error "Docker n√£o est√° instalado!"
    exit 1
fi

if ! command -v docker-compose &> /dev/null; then
    print_error "Docker Compose n√£o est√° instalado!"
    exit 1
fi

# 2. Verificar se arquivo .env existe
if [ ! -f ".env" ]; then
    print_warning "Arquivo .env n√£o encontrado!"
    
    if [ -f "env.example" ]; then
        print_status "Copiando template de configura√ß√£o..."
        cp env.example .env
        print_warning "Arquivo .env criado com configura√ß√µes padr√£o!"
        print_warning "Edite o arquivo .env com suas credenciais antes de continuar."
        print_warning "Execute: nano .env"
        exit 1
    else
        print_error "Template env.example n√£o encontrado!"
        exit 1
    fi
fi

# 3. Verificar configura√ß√µes b√°sicas no .env
print_status "Verificando configura√ß√µes..."
if ! grep -q "LOGIN_USERNAME=" .env; then
    print_error "Configura√ß√£o LOGIN_USERNAME n√£o encontrada no .env!"
    exit 1
fi

if ! grep -q "LOGIN_PASSWORD=" .env; then
    print_error "Configura√ß√£o LOGIN_PASSWORD n√£o encontrada no .env!"
    exit 1
fi

# 4. Parar containers existentes
print_status "Parando containers existentes..."
docker-compose down 2>/dev/null || true

# 5. Atualizar c√≥digo (se for um reposit√≥rio Git)
if [ -d ".git" ]; then
    print_status "Atualizando c√≥digo do reposit√≥rio..."
    git pull
fi

# 6. Construir e iniciar containers
print_status "Construindo e iniciando containers..."
docker-compose up --build -d

# 7. Aguardar containers iniciarem
print_status "Aguardando containers iniciarem..."
sleep 15

# 8. Verificar se containers est√£o rodando
if ! docker ps | grep -q "produtos-app"; then
    print_error "Container n√£o est√° rodando!"
    print_status "Logs do container:"
    docker-compose logs
    exit 1
fi

# 9. Testar aplicativo
print_status "Testando aplicativo..."
if curl -s -o /dev/null -w "%{http_code}" http://localhost:8080 | grep -q "200\|302"; then
    print_status "Aplicativo funcionando!"
else
    print_error "Aplicativo n√£o est√° respondendo!"
    print_status "Logs do container:"
    docker-compose logs
    exit 1
fi

# 10. Obter IP da VPS
VPS_IP=$(curl -s ifconfig.me 2>/dev/null || curl -s ipinfo.io/ip 2>/dev/null || hostname -I | awk '{print $1}')
if [ -z "$VPS_IP" ]; then
    VPS_IP="SEU_IP_AQUI"
    print_warning "N√£o foi poss√≠vel obter IP automaticamente"
fi

# 11. Mostrar informa√ß√µes de acesso
echo ""
print_status "üéâ Deploy conclu√≠do com sucesso!"
echo ""
echo "üåê Acesse o aplicativo em:"
echo "   http://$VPS_IP:8080"
echo "   http://localhost:8080 (local na VPS)"
echo ""
echo "üîê Credenciais de acesso:"
echo "   Usu√°rio: $(grep LOGIN_USERNAME .env | cut -d'=' -f2)"
echo "   Senha: [configurada no .env]"
echo ""
echo "üì± Para testar PWA no celular:"
echo "   1. Acesse http://$VPS_IP:8080 no celular"
echo "   2. Fa√ßa login com suas credenciais"
echo "   3. Deve aparecer op√ß√£o 'Instalar App'"
echo ""
echo "üîß Comandos √∫teis:"
echo "   - Ver logs: docker-compose logs -f"
echo "   - Parar: docker-compose down"
echo "   - Reiniciar: docker-compose restart"
echo "   - Status: docker ps"
echo ""
print_warning "Pr√≥ximo passo: Configure o Nginx para dom√≠nio personalizado"
echo "   sudo cp oc.nonanena.com.br-http.conf /etc/nginx/sites-available/oc.nonanena.com.br"
echo "   sudo ln -s /etc/nginx/sites-available/oc.nonanena.com.br /etc/nginx/sites-enabled/"
echo "   sudo nginx -t && sudo systemctl reload nginx"
